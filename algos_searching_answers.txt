// 1.What is a real-life scenario that uses linear search?

// Answer: Browsing for last names in your iPhone, scanning the phone's contacts top 
// to bottom until you find the last name and correctly associated first name for the person
// whom you want to call.

// 2.What is a real-life scenario that uses binary search?

// Answer: Searching for a book in a library. Here our sorted list is well-arranged books in 
// alphabetical order. We determine total number of racks (to get low, mid, high values). So we 
// know the low and high, add them together and divide by 2 to get middle. We scan from low value 
// to middle to see if its there, if not, repeat process this time replacing low mid high to new values
// of the rest of sorted list until book is found.

// 3.Given the alphabetically sorted collection in this checkpoint, 
// how many iterations would it take to find the value G using linear search?

// Answer: 7 iterations 

// 4.Given the alphabetically sorted collection in this checkpoint, 
// how many iterations would it take to find the value G using binary search?

// Answer: 3 iterations

// 5.Given an unsorted collection of a million items, which algorithm would 
// you choose between linear search and binary search? Explain your reasoning.

// Answer: linear search because the items are unsorted. As we can see from previous questions, we were able to find the 
// G value in nearly one third of the time with binary search which would've proven to be much faster for this example,
// but unfortunately we'd have to settle for linear search because of not being sorted.

// 6.Given a sorted collection of a million items, which algorithm would 
// you choose between linear search and binary search? Explain your reasoning.

// Answer: Definitely binary search because it's sorted! As mentioned in last question, this would prove to be much faster
// than a linear search and just as accurate.

// Programming Assignment:

// 1.You and a friend have set a wager to see who can find the word 
// "Albatross" in the dictionary the fastest. Write a program to allow you to win the bet.

function binarySearch(dict, num, start, end){
	let counter = 0;
	let mid = Math.floor((end - start)/2);
    let midItem = dict[mid];

    if(counter++ > 1000){return;}
    start = start || 0;
    end = end || dict.length-1;   
    console.log('Start:', dict[start]);
    console.log('Mid:', dict[mid]);
    console.log('End:', dict[end]);  
  
    if (midItem === num){
    	return true;
  } else if (num < midItem){
    	return binarySearch(dict, num, start, mid-1);
  } else if (num > midItem){
    	return binarySearch(dict, num, mid + 1, end);
 	}  
  };

let dict = [1,2,3,4,5,6,7,8,9];
start = 0;
end = 8;
mid = 4;
dict[mid] = 5;
console.log(binarySearch(dict, 7));

// 2.You work at a pet store, and a child has asked you to net the only 
// white-spotted goldfish from the fish tank. Write a program that will help 
// you net the right fish.

var fishSearch = function(collectionOfFish, targetFish) {
   var correctFish = null, value;
   for(var i = 0; i < collectionOfFish.length; i++) {
     value = collectionOfFish[i];
     if(value === targetFish){
       correctFish = i;
       break;
     }
   }
   return correctFish;
 };

var arrFish = ["brown", 'white', 'black', 'beige', 'white-spotted'];

fishSearch(arrFish, 'white-spotted');
























